AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Backup CFn 

Parameters:
  Instances:
    Type: CommaDelimitedList
    Description: Backup Instance List
    Default: arn:aws:ec2:ap-northeast-1:123456789012:instance/i-xxxxxxx,arn:aws:ec2:ap-northeast-1:123456789012:instance/i-xxxxxxx

  NotificationEmail:
    Type: String
    Default: notification@email
    Description: Notification Email

  DeleteAfterDays:
    Type: String
    Default: 4
    Description: Nunber of DeleteAfterDays
    
  StartTime:
    Type: String
    Default: 17
    Description: Backup Start Time (TimeZone = UTC)

Resources:

################################
#### Backup 
################################

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption key for daily"
      EnableKeyRotation: True
      Enabled: True
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            "AWS": { "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root" }
          Action:
          - kms:*
          Resource: "*"

  BackupVaultWithDailyBackups:
    Type: "AWS::Backup::BackupVault"
    Properties:
      BackupVaultName: "Ec2-BackupVault"
      EncryptionKeyArn: !GetAtt KMSKey.Arn
      Notifications:
       BackupVaultEvents: 
          - BACKUP_JOB_COMPLETED
       SNSTopicArn: !Ref SNSTopic

  BackupPlanWithDailyBackups:
    Type: "AWS::Backup::BackupPlan"
    Properties:
      BackupPlan:
        BackupPlanName: "Ec2-BackupPlan"
        BackupPlanRule:
          -
            RuleName: "Ec2-BackupRule"
            TargetBackupVault: !Ref BackupVaultWithDailyBackups
            ScheduleExpression: !Sub "cron(0 ${StartTime} ? * * *)"
            Lifecycle:
              DeleteAfterDays: !Ref DeleteAfterDays
            StartWindowMinutes: 60
            CompletionWindowMinutes: 120
            RecoveryPointTags: {
              "Backup-method": "aws-backup"
            }
    DependsOn: BackupVaultWithDailyBackups

  BackupRole:
    Type: "AWS::IAM::Role"
    Properties:
     AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         -
          Effect: "Allow"
          Principal:
            Service:
              - "backup.amazonaws.com"
          Action:
            - "sts:AssumeRole"
     ManagedPolicyArns:
       - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
       - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores"
     Path: /
     Policies:
       - PolicyName: "AWSBackupServiceRolePolicyForBackup_AMIRemovalPolicy"
         PolicyDocument:
           Version: 2012-10-17
           Statement:
             - Effect: Allow
               Action:
                 - 'ec2:DescribeFastSnapshotRestores'
               Resource: '*'

  BackupSelection:
    Type: "AWS::Backup::BackupSelection"
    Properties:
      BackupSelection:
        SelectionName: "Ec2-ResourceName"
        IamRoleArn: !GetAtt BackupRole.Arn
        Resources: !Ref Instances
      BackupPlanId: !Ref BackupPlanWithDailyBackups
    DependsOn: BackupPlanWithDailyBackups 

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Ec2-Backup-Check"
      DisplayName: "Ec2-Backup-Check"

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
       Version: '2012-10-17'
       Statement:
       - Sid: "__default_statement_ID"
         Effect: Allow
         Principal:
          AWS: "*"
         Action:
         - SNS:GetTopicAttributes
         - SNS:SetTopicAttributes
         - SNS:AddPermission
         - SNS:RemovePermission
         - SNS:DeleteTopic
         - SNS:Subscribe
         - SNS:ListSubscriptionsByTopic
         - SNS:Publish
         - SNS:Receive
         Resource: !Ref SNSTopic
         Condition:
          StringEquals:
           AWS:SourceOwner: !Sub ${AWS::AccountId}
       - Sid: My-statement-id
         Effect: Allow
         Principal:
          Service: backup.amazonaws.com
         Action:
         - SNS:Publish
         Resource: !Ref SNSTopic
      Topics: 
       - !Ref SNSTopic

  SNSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref NotificationEmail
      Protocol: email-json
      FilterPolicy: {"State": [{"anything-but": ["COMPLETED"]}]}
